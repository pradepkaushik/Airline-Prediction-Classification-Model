

# Importing the libraries


import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns


# Importing the dataset

dataset = pd.read_csv('Admission_Predict.csv')



dataset.head()

X = dataset.iloc[:, [1, 2]].values
y = dataset.iloc[:, 7].values

# Splitting the dataset into the Training set and Test set


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)



# Feature Scaling


from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)



'''# Fitting support vector machine to the Training set

from sklearn.svm import SVC              #79%
classifier = SVC(kernel='linear',random_state=0)
classifier.fit(X_train, y_train)'''


# Fitting support vector machine to the Training set

from sklearn.svm import SVC              #81%
classifier = SVC(kernel='rbf',random_state=0)
classifier.fit(X_train, y_train)



'''#decision tree  #70% accuracy

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy')
classifier.fit(X_train, y_train)'''


'''#random forest    70%  


from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)'''



'''#Kneirest neighbors   #78% 

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=10, metric='minkowski', p=2)
classifier.fit(X_train, y_train)'''


'''# Fitting Naive Bayes to the Training set


from sklearn.naive_bayes import GaussianNB        #82%
classifier = GaussianNB()
classifier.fit(X_train, y_train)'''



# Predicting the Test set results

y_pred = classifier.predict(X_test)

# Making the Confusion Matrix

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, linewidths=0.2, cmap='Blues')

# Printing the accuracies

print("Total rows = {}".format(cm.sum()))
print("Correct Answers = {}".format(cm.diagonal().sum()))
print("Accuracy = {}%".format((cm.diagonal().sum()/cm.sum()) * 100))


# Asking questions from the model

questions = np.array([[327,111], [316,104]])
questions_transformed = sc.transform(questions)
answers = classifier.predict(questions_transformed)
                             
                             
                             
# Finding the optimal number of support vector variables
accuracies = []
for n in range(1,50,2):
    classifier = GaussianNB()
    classifier.fit(X_train, y_train)
    y_pred = classifier.predict(X_test)
    cm = confusion_matrix(y_test, y_pred)
    accuracies.append(cm.diagonal().sum() * 100 / cm.sum())

sns.lineplot(x = range(1,50,2), y = accuracies)
